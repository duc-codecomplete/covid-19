{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","onChooseCountry","e","value","a","data","state","country","filter","item","Country","setState","getApi","axios","get","then","res","Countries","totalCase","newCase","died","totalRecovered","vn","countries","map","TotalConfirmed","NewConfirmed","TotalDeaths","TotalRecovered","world","this","className","style","marginTop","Table","striped","bordered","hover","Autocomplete","defaultValue","noOptionsText","options","getOptionLabel","option","onChange","renderInput","params","TextField","label","variant","href","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a0dc326.chunk.js","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Table from 'react-bootstrap/Table'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport TextField from '@material-ui/core/TextField'\n\nclass App extends React.Component {\n    constructor() {\n        super()\n\n        this.state = {\n            data: [],\n            countries: [],\n            country: null,\n            vn: null,\n            world: null\n        }\n\n    }\n\n    onChooseCountry = async (e, value) => {\n      const { data } = this.state\n      const country = data.filter(item => item.Country === value)\n      await this.setState({country: country[0]})\n    }\n\n    getApi = async () => {\n      const apiEndPoint = 'https://api.covid19api.com/summary'\n      await axios.get(apiEndPoint)\n                .then((res) => {\n                  const data = res.data.Countries\n                  let totalCase = 0, newCase = 0, died = 0, totalRecovered = 0, vn = null, country = null\n                  const countries = data.map((item) => {\n                    totalCase = totalCase + item.TotalConfirmed\n                    newCase = newCase + item.NewConfirmed\n                    died = died + item.TotalDeaths\n                    totalRecovered = totalRecovered + item.TotalRecovered\n                    if (item.Country === 'Vietnam') vn = item\n                    if (item.Country === 'US') country = item\n                    return item.Country\n                  })\n\n                  const world = {\n                    TotalConfirmed: totalCase,\n                    NewConfirmed: newCase,\n                    TotalDeaths: died,\n                    TotalRecovered: totalRecovered\n                  }\n\n                  this.setState({countries, data, vn, world, country})\n                })\n    }\n\n    async componentDidMount() {\n      await this.getApi()\n    }\n\n    render() {\n        const { countries, vn, world, country } = this.state\n        return (\n            <div>\n                <div className=\"container\">\n                    <div className=\"text-center\">\n                        <h1 style={{marginTop: 50}}>COVID-19 Statistics</h1>\n                        <Table striped bordered hover>\n                          <thead>\n                            <tr>\n                              <th>#</th>\n                              <th>Số ca nhiễm</th>\n                              <th>Ca mới</th>\n                              <th>Tử vong</th>\n                              <th>Hồi phục</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            <tr>\n                              <td>Việt Nam</td>\n                              <td>{vn ? vn.TotalConfirmed : ''}</td>\n                              <td>{vn ? '+' + vn.NewConfirmed : ''}</td>\n                              <td className=\"died\">{vn ? vn.TotalDeaths : ''}</td>\n                              <td className=\"recovered\">{vn ? vn.TotalRecovered : ''}</td>\n                            </tr>\n                            <tr>\n                              <td>Thế giới</td>\n                              <td>{world ? world.TotalConfirmed : ''}</td>\n                              <td>{world ? '+' + world.NewConfirmed : ''}</td>\n                              <td className=\"died\">{world ? world.TotalDeaths : ''}</td>\n                              <td className=\"recovered\">{world ? world.TotalRecovered : ''}</td>\n                            </tr>\n                            <tr>\n                              <td>\n                                <Autocomplete\n                                  defaultValue=\"US\"\n                                  noOptionsText={'No Options'}\n                                  options={countries.filter(item => item !== 'Viet Nam' && item !== 'Vietnam')}\n                                  getOptionLabel={option => option}\n                                  onChange={this.onChooseCountry}\n                                  renderInput={params => <TextField {...params} label=\"Country\" variant=\"outlined\" />}\n                                />\n                              </td>\n                              <td>{country ? country.TotalConfirmed : ''}</td>\n                              <td>{country ? '+' + country.NewConfirmed : ''}</td>\n                              <td className=\"died\">{country ? country.TotalDeaths : ''}</td>\n                              <td className=\"recovered\">{country ? country.TotalRecovered : ''}</td>\n                            </tr>\n                          </tbody>\n                        </Table>\n                    </div>\n                </div>\n                <hr />\n                <div className=\"credits text-center\">\n                    <p>\n                        <a href=\"http://jasonwatmore.com\" target=\"_top\">Code Complete</a>\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}